function [state] = stateManager(position, platform_position, t)
    
    % Persistent variables (maintain values between time steps)
    persistent current_state hover_start_time last_t
    
    % Initialize on first run
    if isempty(current_state)
        current_state = 1;  % Start in takeoff state
        hover_start_time = -1;
        last_t = 0;
    end
    
    % Calculate dt automatically
    dt = t - last_t;
    last_t = t;
    
    % Parameters
    altitude_threshold = 0.1;      % Hysteresis: Â±0.2m tolerance
    hover_time_required = 10.0;     % 2 seconds at hover height
    position_error_threshold = 0.2; % Position error threshold for landing transition
    position_error_time_required = 10.0; % Time at low position error before landing
    landing_distance = 1.5;        % Distance to platform to trigger landing
    landing_altitude = 0.5;        % Altitude below which we're "landed"
    target_hover_height = 2.0;     % Target height before traj tracking

    altitude = position(3);

    % Calculate distance to platform (horizontal)
    horizontal_distance = norm(position(1:2) - platform_position(1:2));
    
    % State machine logic
    switch current_state
        case 1  % TAKEOFF STATE
            % Check if we've reached hover height
            if altitude >= (target_hover_height - altitude_threshold)
                % Start timer if just arrived
                if hover_start_time < 0
                    hover_start_time = t;
                end
                
                % Check how long we've been hovering
                time_at_hover = t - hover_start_time;
                
                % Transition to follow state
                if time_at_hover >= hover_time_required
                    current_state = 2;
                    hover_start_time = -1;  % Reset
                end
            else
                % Reset timer if we drop below altitude
                if altitude < (target_hover_height - 2*altitude_threshold)
                    hover_start_time = -1;
                end
            end
            
        case 2  % FOLLOW STATE
            % Check if we're close enough to platform to start landing
            if horizontal_distance < landing_distance
                current_state = 3;
            end
            
        case 3  % LANDING STATE
            % Optional: detect touchdown
            if altitude < landing_altitude
                % Stay in landing state (mission complete)
            end
    end
    
    % Outputs
    state = current_state;
    %hover_position = altitude;  
end